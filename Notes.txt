fcntl - manipulate file descriptor

SYNOPSIS
       #include <unistd.h>
       #include <fcntl.h>

       int fcntl(int fd, int cmd, ... /* arg */ );

DESCRIPTION
       fcntl() performs one of the operations described below on the open file descriptor fd.  The operation is determined by cmd.

       fcntl()  can  take  an optional third argument.  Whether or not this argument is required is determined by cmd.  The required argument type is indicated in parentheses after each cmd name (in
       most cases, the required type is int, and we identify the argument using the name arg), or void is specified if the argument is not required.

       Certain of the operations below are supported only since a particular Linux kernel version.  The preferred method of checking whether the host kernel supports a  particular  operation  is  to
       invoke fcntl() with the desired cmd value and then test whether the call failed with EINVAL, indicating that the kernel does not recognize this value.

   Duplicating a file descriptor
       F_DUPFD (int)
              Find  the  lowest numbered available file descriptor greater than or equal to arg and make it be a copy of fd.  This is different from dup2(2), which uses exactly the descriptor speci‚Äê
              fied.

              On success, the new descriptor is returned.

              See dup(2) for further details.

       F_DUPFD_CLOEXEC (int; since Linux 2.6.24)
              As for F_DUPFD, but additionally set the close-on-exec flag for the duplicate descriptor.  Specifying this flag permits a program to avoid an additional fcntl()  F_SETFD  operation  to
              set the FD_CLOEXEC flag.  For an explanation of why this flag is useful, see the description of O_CLOEXEC in open(2).

   File descriptor flags
       The  following commands manipulate the flags associated with a file descriptor.  Currently, only one such flag is defined: FD_CLOEXEC, the close-on-exec flag.  If the FD_CLOEXEC bit is 0, the
       file descriptor will remain open across an execve(2), otherwise it will be closed.

       F_GETFD (void)
              Read the file descriptor flags; arg is ignored.

       F_SETFD (int)
              Set the file descriptor flags to the value specified by arg.

       In multithreaded programs, using fcntl() F_SETFD to set the close-on-exec flag at the same time as another thread performs a fork(2) plus execve(2) is vulnerable to a race condition that  may
       unintentionally leak the file descriptor to the program executed in the child process.  See the discussion of the O_CLOEXEC flag in open(2) for details and a remedy to the problem.



Shared memory :
This memory is present in proce''s virtual address space, so no need for kernel space to be invoked, so fast IPC.
Once the memory is being shared, there are no checks on how the processes are using it. They must rely on other mechanisms, for example System V semaphores, to synchronize access to the memory. 


